/** File Hash: 96cc5b55b0ac852fb527d26031abb86b9af56b889cd7825ccb5cdc959819d214 */

/** Autogenerated Code - Do Not Touch */
/* eslint-disable */

import { useService } from './service';
import type { MerchandiseProductCreate } from "@/dtos/merchandise/merchandise-product-create"
import type { MerchandiseProductDetail } from "@/dtos/merchandise/merchandise-product-detail"
import type { MerchandiseProductSearch } from "@/dtos/merchandise/merchandise-product-search"
import type { Page } from "@/dtos/page"
import type { Pagination } from "@/dtos/pagination"

export function useMerchandiseProductService() {
  const basePath = `api/v1/merchandise/products`;
  const { api, filterSearchParams } = useService(basePath);
  
  async function create(merchandiseCreateDto: MerchandiseProductCreate): Promise<MerchandiseProductDetail> {
    return api.post(``, { json: merchandiseCreateDto }).json();
  }
  async function findByFilters(merchandiseSearchDto: MerchandiseProductSearch, pageDto: Page): Promise<Pagination<MerchandiseProductDetail>> {
    return api.get(``, { searchParams: filterSearchParams([['pageSize', pageDto.pageSize], ['pointsUpperBound', merchandiseSearchDto.pointsUpperBound], ['priceLowerBound', merchandiseSearchDto.priceLowerBound], ['sortOption', merchandiseSearchDto.sortOption], ['priceUpperBound', merchandiseSearchDto.priceUpperBound], ['name', merchandiseSearchDto.name], ['pointsLowerBound', merchandiseSearchDto.pointsLowerBound], ['pageIndex', pageDto.pageIndex]]) }).json();
  }
  async function findById(id: number): Promise<MerchandiseProductDetail> {
    return api.get(`${id}`).json();
  }
  return {
    create,
    findByFilters,
    findById,
  };
}
